{
  "title": "10分钟上手Pandas",
  "cells": [
    {
      "type": "markdown",
      "data": "[来自官网十分钟教学](http:#pandas.pydata.org/pandas-docs/stable/10min.html#) \nPandas的主要数据结构：\n\n| Dimensions | Name | Description |\n| :----:  |  :---:  | :----: |\n| 1 | Series| 1D labeled homogeneously-typed array |\n| 2 | DataFrame | General 2D labeled, size-mutable tabular structure with potentially heterogeneously-typed columns |\n| 3 | Panel | General 3D labeled, also size-mutable array |\n\n\n\n# 一、引入\n\n```python\nimport pandas as pd   #数据分析，代码基于numpy\nimport numpy as np    #处理数据，代码基于ndarray\nimport matplotlib.pyplot as plt      #画图\n```\n\n[matplotlib图库具有大量代码案例，可直接使用](http:#matplotlib.org/gallery.html) \n[pandas 官网教程](http:#pandas.pydata.org/pandas-docs/stable/tutorials.html)\n\n# 二、创建对象\n\n+ ## Series字典对象\n\n```python\n>>>s = pd.Series([1,3,5,np.nan,6,8])   #默认以数字从0开始作为键值,使用np.nan表示不参与计算\n>>>s\n0    1.0\n1    3.0\n2    5.0\n3    NaN\n4    6.0\n5    8.0\ndtype: float64\n```\n\n```python\n>>> s = pd.Series(data=[1,2,3,4],index = ['a','b','c','d'])  #传入键和值方式\n>>> s\na    1\nb    2\nc    3\nd    4\ndtype: int64\n>>> s.index    #获取键列表\nIndex(['a', 'b', 'c', 'd'], dtype='object')\n>>> s.values    #获取值列表\narray([1, 2, 3, 4], dtype=int64)\n```\n\n+ ## DataFrame表格对象\n\n```python\nIn [10]: df2 = pd.DataFrame({ 'A' : 1.,\n                     'B' : pd.Timestamp('20130102'),\n                     'C' : pd.Series(1,index=list(range(4)),dtype='float32'),   #生成Series对象,取的是value\n                     'D' : np.array([3] * 4,dtype='int32'),  #生成numpy对象\n                     'E' : pd.Categorical([\"test\",\"train\",\"test\",\"train\"]),\n                     'F' : 'foo' })  \n\nIn [11]: df2\nOut[11]:          # 默认以数字从0开始作为行键,以字典键为列键\n     A          B    C  D      E    F\n0  1.0 2013-01-02  1.0  3   test  foo\n1  1.0 2013-01-02  1.0  3  train  foo\n2  1.0 2013-01-02  1.0  3   test  foo\n3  1.0 2013-01-02  1.0  3  train  foo\n```\n\n```python\nIn [6]: dates = pd.date_range('20130101', periods=6)\n\nIn [7]: dates\nOut[7]: \nDatetimeIndex(['2013-01-01', '2013-01-02', '2013-01-03', '2013-01-04',\n               '2013-01-05', '2013-01-06'],\n              dtype='datetime64[ns]', freq='D')\n\nIn [8]: df = pd.DataFrame(np.random.randn(6,4), index=dates, columns=list('ABCD'))    #np.random.randn(6,4)返回一个样本，具有标准正态分布\n\nIn [9]: df\nOut[9]:          # 指定dates为行键，columns为列键\n                   A         B         C         D\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n2013-01-05 -0.424972  0.567020  0.276232 -1.087401\n2013-01-06 -0.673690  0.113648 -1.478427  0.524988\n\nIn [12]: df2.dtypes    #查看列数据类型\nOut[12]: \nA           float64\nB    datetime64[ns]\nC           float32\nD             int32\nE          category\nF            object\ndtype: object\n```\n\n# 三、查看数据\n\n+ ## 查看头尾数据：\n\n```python\nIn [14]: df.head()    #默认值5\nOut[14]: \n                   A         B         C         D\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n2013-01-05 -0.424972  0.567020  0.276232 -1.087401\n\nIn [15]: df.tail(3)     #默认值5\nOut[15]:  \n                   A         B         C         D\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n2013-01-05 -0.424972  0.567020  0.276232 -1.087401\n2013-01-06 -0.673690  0.113648 -1.478427  0.524988\n```\n\n+ ## 查看行键、列键、数据：\n\n```python\nIn [16]: df.index\nOut[16]: \nDatetimeIndex(['2013-01-01', '2013-01-02', '2013-01-03', '2013-01-04',\n               '2013-01-05', '2013-01-06'],\n              dtype='datetime64[ns]', freq='D')\n\nIn [17]: df.columns\nOut[17]: Index([u'A', u'B', u'C', u'D'], dtype='object')\n\nIn [18]: df.values\nOut[18]: \narray([[ 0.4691, -0.2829, -1.5091, -1.1356],\n       [ 1.2121, -0.1732,  0.1192, -1.0442],\n       [-0.8618, -2.1046, -0.4949,  1.0718],\n       [ 0.7216, -0.7068, -1.0396,  0.2719],\n       [-0.425 ,  0.567 ,  0.2762, -1.0874],\n       [-0.6737,  0.1136, -1.4784,  0.525 ]])\n```\n\n+ ## 查看数据整体概况，和、平均值、最大、最小等：\n\n```python\nIn [19]: df.describe()\nOut[19]: \n              A         B         C         D\ncount  6.000000  6.000000  6.000000  6.000000\nmean   0.073711 -0.431125 -0.687758 -0.233103\nstd    0.843157  0.922818  0.779887  0.973118\nmin   -0.861849 -2.104569 -1.509059 -1.135632\n25%   -0.611510 -0.600794 -1.368714 -1.076610\n50%    0.022070 -0.228039 -0.767252 -0.386188\n75%    0.658444  0.041933 -0.034326  0.461706\nmax    1.212112  0.567020  0.276232  1.071804\n```\n\n```python\ntrain_df.info()\nprint('\\_'*40)\n<class 'pandas.core.frame.DataFrame'\\>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\nPassengerId    891 non-null int64\nSurvived       891 non-null int64\nPclass 891 non-null int64\nName           891 non-null object\nSex            891 non-null object\nAge            714 non-null float64\nSibSp          891 non-null int64\nParch          891 non-null int64\nTicket         891 non-null object\nFare           891 non-null float64\nCabin          204 non-null object\nEmbarked       889 non-null object\ndtypes: float64(2), int64(5), object(5)\nmemory usage: 83.6+ KB\n________________________________________\n\n```\n\n```python\ntrain_df.describe(include=['O'])\n\nName    Sex Ticket  Cabin   Embarked\ncount   891 891 891 204 889\nunique  891 2   681 147 3\ntop Chronopoulos, Mr. Apostolos male    CA. 2343    G6  S\nfreq    1   577 7   4   644\n```\n\n+ ## 行或列平均值：\n\n```python\nIn [61]: df.mean()\nOut[61]: \nA   -0.004474\nB   -0.383981\nC   -0.687758\nD    5.000000\nF    3.000000\ndtype: float64\n```\n\n```python\nIn [62]: df.mean(1)\nOut[62]: \n2013-01-01    0.872735\n2013-01-02    1.431621\n2013-01-03    0.707731\n2013-01-04    1.395042\n2013-01-05    1.883656\n2013-01-06    1.592306\nFreq: D, dtype: float64\n```\n\n+ ## 转置：\n\n```python\nIn [20]: df.T\nOut[20]: \n   2013-01-01  2013-01-02  2013-01-03  2013-01-04  2013-01-05  2013-01-06\nA    0.469112    1.212112   -0.861849    0.721555   -0.424972   -0.673690\nB   -0.282863   -0.173215   -2.104569   -0.706771    0.567020    0.113648\nC   -1.509059    0.119209   -0.494929   -1.039575    0.276232   -1.478427\nD   -1.135632   -1.044236    1.071804    0.271860   -1.087401    0.524988\n```\n\n+ ## 根据行、列排序：\n\n```python\nIn [21]: df.sort_index(axis=1, ascending=False)    #根据轴，可以.sort_index(axis=0, by=None, ascending=True)。by参数只能对列\nOut[21]: \n                   D         C         B         A\n2013-01-01 -1.135632 -1.509059 -0.282863  0.469112\n2013-01-02 -1.044236  0.119209 -0.173215  1.212112\n2013-01-03  1.071804 -0.494929 -2.104569 -0.861849\n2013-01-04  0.271860 -1.039575 -0.706771  0.721555\n2013-01-05 -1.087401  0.276232  0.567020 -0.424972\n2013-01-06  0.524988 -1.478427  0.113648 -0.673690\nSorting by values\n\nIn [22]: df.sort_values(by='B')       #根据值\nOut[22]: \n                   A         B         C         D\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-06 -0.673690  0.113648 -1.478427  0.524988\n2013-01-05 -0.424972  0.567020  0.276232 -1.087401\n```\n\n# 四、选择数据\n\n+ ## 选择单列：\n\n```python\nIn [23]: df['A']  #可使用df.A\nOut[23]: \n2013-01-01    0.469112\n2013-01-02    1.212112\n2013-01-03   -0.861849\n2013-01-04    0.721555\n2013-01-05   -0.424972\n2013-01-06   -0.673690\nFreq: D, Name: A, dtype: float64\n```\n\n+ ## 选择局部：\n\n```python\nIn [24]: df[0:3]\nOut[24]: \n                   A         B         C         D\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n\nIn [25]: df['20130102':'20130104']\nOut[25]: \n                   A         B         C         D\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n```\n\n+ ## 标签选择： \n通过行键，列键\n\n```python\nIn [26]: df.loc[dates[0]]        #选择一行，会降维\nOut[26]: \nA    0.469112\nB   -0.282863\nC   -1.509059\nD   -1.135632\nName: 2013-01-01 00:00:00, dtype: float64\n```\n\n```python\nIn [27]: df.loc[:,['A','B']]  #局部选择\nOut[27]: \n                   A         B\n2013-01-01  0.469112 -0.282863\n2013-01-02  1.212112 -0.173215\n2013-01-03 -0.861849 -2.104569\n2013-01-04  0.721555 -0.706771\n2013-01-05 -0.424972  0.567020\n2013-01-06 -0.673690  0.113648\n```\n\n```python\nIn [28]: df.loc['20130102':'20130104',['A','B']]    #局部选择\nOut[28]: \n                   A         B\n2013-01-02  1.212112 -0.173215\n2013-01-03 -0.861849 -2.104569\n2013-01-04  0.721555 -0.706771\n```\n\n```python\nIn [29]: df.loc['20130102',['A','B']]   #选择一行，会降维\nOut[29]: \nA    1.212112\nB   -0.173215\nName: 2013-01-02 00:00:00, dtype: float64\n```\n\n```python\nIn [30]: df.loc[dates[0],'A']   #选择具体某个元素，会降维\nOut[30]: 0.46911229990718628\n```\n\n```python\nIn [31]: df.at[dates[0],'A']     #选择具体某个元素，会降维\nOut[31]: 0.46911229990718628\n```\n\n+ ## 位置选择： \n存在一个从0开始类似于数组\n\n```python\nIn [32]: df.iloc[3]\nOut[32]: \nA    0.721555\nB   -0.706771\nC   -1.039575\nD    0.271860\nName: 2013-01-04 00:00:00, dtype: float64\n```\n\n```python\nIn [33]: df.iloc[3:5,0:2]\nOut[33]: \n                   A         B\n2013-01-04  0.721555 -0.706771\n2013-01-05 -0.424972  0.567020\n```\n\n```python\nIn [34]: df.iloc[[1,2,4],[0,2]]\nOut[34]: \n                   A         C\n2013-01-02  1.212112  0.119209\n2013-01-03 -0.861849 -0.494929\n2013-01-05 -0.424972  0.276232\n```\n\n```python\nIn [35]: df.iloc[1:3,:]\nOut[35]: \n                   A         B         C         D\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n```\n\n```python\nIn [36]: df.iloc[:,1:3]\nOut[36]: \n                   B         C\n2013-01-01 -0.282863 -1.509059\n2013-01-02 -0.173215  0.119209\n2013-01-03 -2.104569 -0.494929\n2013-01-04 -0.706771 -1.039575\n2013-01-05  0.567020  0.276232\n2013-01-06  0.113648 -1.478427\n```\n\n```python\nIn [37]: df.iloc[1,1]\nOut[37]: -0.17321464905330858\n```\n\n```python\nIn [38]: df.iat[1,1]\nOut[38]: -0.17321464905330858\n```\n\n+ ## 布尔索引：\n\n```python\nIn [39]: df[df.A > 0]\nOut[39]: \n                   A         B         C         D\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n```\n\n```python\nIn [40]: df[df > 0]\nOut[40]: \n                   A         B         C         D\n2013-01-01  0.469112       NaN       NaN       NaN\n2013-01-02  1.212112       NaN  0.119209       NaN\n2013-01-03       NaN       NaN       NaN  1.071804\n2013-01-04  0.721555       NaN       NaN  0.271860\n2013-01-05       NaN  0.567020  0.276232       NaN\n2013-01-06       NaN  0.113648       NaN  0.524988\n```\n\n```python\nIn [41]: df2 = df.copy()\n\nIn [42]: df2['E'] = ['one', 'one','two','three','four','three']\n\nIn [43]: df2\nOut[43]: \n                   A         B         C         D      E\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632    one\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236    one\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804    two\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860  three\n2013-01-05 -0.424972  0.567020  0.276232 -1.087401   four\n2013-01-06 -0.673690  0.113648 -1.478427  0.524988  three\n\nIn [44]: df2[df2['E'].isin(['two','four'])]\nOut[44]: \n                   A         B         C         D     E\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804   two\n2013-01-05 -0.424972  0.567020  0.276232 -1.087401  four\n```\n\n# 五、修改数据\n\n+ ## 读取时将多列并成一列：\n\n```python\ndef parse(x):\n    return datetime.strptime(x, '%Y %m %d %H')\ndataset = read_csv('raw.csv',  parse_dates = [['year', 'month', 'day', 'hour']], index_col=0, date_parser=parse)\n```\n\n+ ## Series赋值列：\n\n```python\nIn [45]: s1 = pd.Series([1,2,3,4,5,6], index=pd.date_range('20130102', periods=6))\n\nIn [46]: s1\nOut[46]: \n2013-01-02    1\n2013-01-03    2\n2013-01-04    3\n2013-01-05    4\n2013-01-06    5\n2013-01-07    6\nFreq: D, dtype: int64\n\nIn [47]: df['F'] = s1     #通过Series赋值列\n```\n\n+ ## 赋值单个元素：\n\n```python\ndf.at[dates[0],'A'] = 0\ndf.iat[0,1] = 0\n```\n\n```python\ndf.loc[:,'D'] = np.array([5] * len(df))   #通过numpy赋值列\nIn [51]: df\nOut[51]: \n                   A         B         C  D    F\n2013-01-01  0.000000  0.000000 -1.509059  5  NaN\n2013-01-02  1.212112 -0.173215  0.119209  5  1.0\n2013-01-03 -0.861849 -2.104569 -0.494929  5  2.0\n2013-01-04  0.721555 -0.706771 -1.039575  5  3.0\n2013-01-05 -0.424972  0.567020  0.276232  5  4.0\n2013-01-06 -0.673690  0.113648 -1.478427  5  5.0\n```\n\n```python\nIn [52]: df2 = df.copy()\n\nIn [53]: df2[df2 > 0] = -df2    #为每个数据赋值\n\nIn [54]: df2\nOut[54]: \n                   A         B         C  D    F\n2013-01-01  0.000000  0.000000 -1.509059 -5  NaN\n2013-01-02 -1.212112 -0.173215 -0.119209 -5 -1.0\n2013-01-03 -0.861849 -2.104569 -0.494929 -5 -2.0\n2013-01-04 -0.721555 -0.706771 -1.039575 -5 -3.0\n2013-01-05 -0.424972 -0.567020 -0.276232 -5 -4.0\n2013-01-06 -0.673690 -0.113648 -1.478427 -5 -5.0\n```\n\n+ ## 修改索引：\n\n```python\nIn [55]: df1 = df.reindex(index=dates[0:4], columns=list(df.columns) + ['E'])   #修改DataFrame的键\n\nIn [56]: df1.loc[dates[0]:dates[1],'E'] = 1\n\nIn [57]: df1\nOut[57]: \n                   A         B         C  D    F    E\n2013-01-01  0.000000  0.000000 -1.509059  5  NaN  1.0\n2013-01-02  1.212112 -0.173215  0.119209  5  1.0  1.0\n2013-01-03 -0.861849 -2.104569 -0.494929  5  2.0  NaN\n2013-01-04  0.721555 -0.706771 -1.039575  5  3.0  NaN\n```\n\n# 六、缺失值处理\n\npandas用numpy.nan表示缺失值，不参与计算。 \n+ ## 去掉缺失行：\n\n```python\nIn [58]: df1.dropna(how='any')\nOut[58]: \n                   A         B         C  D    F    E\n2013-01-02  1.212112 -0.173215  0.119209  5  1.0  1.0\n```\n\n+ ## 填充缺失值：\n\n```python\nIn [59]: df1.fillna(value=5)   #对缺失值处进行填充\nOut[59]: \n                   A         B         C  D    F    E\n2013-01-01  0.000000  0.000000 -1.509059  5  5.0  1.0\n2013-01-02  1.212112 -0.173215  0.119209  5  1.0  1.0\n2013-01-03 -0.861849 -2.104569 -0.494929  5  2.0  5.0\n2013-01-04  0.721555 -0.706771 -1.039575  5  3.0  5.0\n```\n\n+ ## 判断何处缺失：\n\n```python\nIn [60]: pd.isnull(df1)    #判断位置元素是否为缺失值\nOut[60]: \n                A      B      C      D      F      E\n2013-01-01  False  False  False  False   True  False\n2013-01-02  False  False  False  False  False  False\n2013-01-03  False  False  False  False  False   True\n2013-01-04  False  False  False  False  False   True\n```\n\n# 七、操作\n\n+ ## 偏移（对齐）元素：\n\n```python\nIn [63]: s = pd.Series([1,3,5,np.nan,6,8], index=dates).shift(2)                   #序列元素偏移两位\n\nIn [64]: s\nOut[64]: \n2013-01-01    NaN\n2013-01-02    NaN\n2013-01-03    1.0\n2013-01-04    3.0\n2013-01-05    5.0\n2013-01-06    NaN\nFreq: D, dtype: float64\n\nIn [65]: df.sub(s, axis='index')\nOut[65]: \n                   A         B         C    D    F\n2013-01-01       NaN       NaN       NaN  NaN  NaN\n2013-01-02       NaN       NaN       NaN  NaN  NaN\n2013-01-03 -1.861849 -3.104569 -1.494929  4.0  1.0\n2013-01-04 -2.278445 -3.706771 -4.039575  2.0  0.0\n2013-01-05 -5.424972 -4.432980 -4.723768  0.0 -1.0\n2013-01-06       NaN       NaN       NaN  NaN  NaN\n```\n\n+ ## 对元素应用函数：\n\n```python\nIn [66]: df.apply(np.cumsum)    #对对象每个元素应用函数\nOut[66]: \n                   A         B         C   D     F\n2013-01-01  0.000000  0.000000 -1.509059   5   NaN\n2013-01-02  1.212112 -0.173215 -1.389850  10   1.0\n2013-01-03  0.350263 -2.277784 -1.884779  15   3.0\n2013-01-04  1.071818 -2.984555 -2.924354  20   6.0\n2013-01-05  0.646846 -2.417535 -2.648122  25  10.0\n2013-01-06 -0.026844 -2.303886 -4.126549  30  15.0\n\nIn [67]: df.apply(lambda x: x.max() - x.min())\nOut[67]: \nA    2.073961\nB    2.671590\nC    1.785291\nD    0.000000\nF    4.000000\ndtype: float64\n```\n\n+ ## 直方图：\n\n```python\nIn [68]: s = pd.Series(np.random.randint(0, 7, size=10))\n\nIn [69]: s\nOut[69]: \n0    4\n1    2\n2    1\n3    2\n4    6\n5    4\n6    4\n7    6\n8    4\n9    4\ndtype: int64\n\nIn [70]: s.value_counts()   #统计值以数字格式显示直方图\nOut[70]: \n4    5\n6    2\n2    2\n1    1\ndtype: int64\n```\n\n+ ## 字符串操作：\n\n```python\nIn [71]: s = pd.Series(['A', 'B', 'C', 'Aaba', 'Baca', np.nan, 'CABA', 'dog', 'cat'])\n\nIn [72]: s.str.lower()   #序列字符串转成小写字母\nOut[72]: \n0       a\n1       b\n2       c\n3    aaba\n4    baca\n5     NaN\n6    caba\n7     dog\n8     cat\ndtype: object\n```\n\n# 八、合并\n\n+ ## Comcat：\n\n```python\nIn [73]: df = pd.DataFrame(np.random.randn(10, 4))\n\nIn [74]: df\nOut[74]: \n          0         1         2         3\n0 -0.548702  1.467327 -1.015962 -0.483075\n1  1.637550 -1.217659 -0.291519 -1.745505\n2 -0.263952  0.991460 -0.919069  0.266046\n3 -0.709661  1.669052  1.037882 -1.705775\n4 -0.919854 -0.042379  1.247642 -0.009920\n5  0.290213  0.495767  0.362949  1.548106\n6 -1.131345 -0.089329  0.337863 -0.945867\n7 -0.932132  1.956030  0.017587 -0.016692\n8 -0.575247  0.254161 -1.143704  0.215897\n9  1.193555 -0.077118 -0.408530 -0.862495\n\n\\# break it into pieces\nIn [75]: pieces = [df[:3], df[3:7], df[7:]]\n\nIn [76]: pd.concat(pieces)\nOut[76]: \n          0         1         2         3\n0 -0.548702  1.467327 -1.015962 -0.483075\n1  1.637550 -1.217659 -0.291519 -1.745505\n2 -0.263952  0.991460 -0.919069  0.266046\n3 -0.709661  1.669052  1.037882 -1.705775\n4 -0.919854 -0.042379  1.247642 -0.009920\n5  0.290213  0.495767  0.362949  1.548106\n6 -1.131345 -0.089329  0.337863 -0.945867\n7 -0.932132  1.956030  0.017587 -0.016692\n8 -0.575247  0.254161 -1.143704  0.215897\n9  1.193555 -0.077118 -0.408530 -0.862495\n```\n\n+ ## Join：\n\n```python\nIn [78]: right = pd.DataFrame({'key': ['foo', 'foo'], 'rval': [4, 5]})\n\nIn [79]: left\nOut[79]: \n   key  lval\n0  foo     1\n1  foo     2\n\nIn [80]: right\nOut[80]: \n   key  rval\n0  foo     4\n1  foo     5\n\nIn [81]: pd.merge(left, right, on='key')\nOut[81]: \n   key  lval  rval\n0  foo     1     4\n1  foo     1     5\n2  foo     2     4\n3  foo     2     5\n```\n\n```python\nIn [82]: left = pd.DataFrame({'key': ['foo', 'bar'], 'lval': [1, 2]})\n\nIn [83]: right = pd.DataFrame({'key': ['foo', 'bar'], 'rval': [4, 5]})\n\nIn [84]: left\nOut[84]: \n   key  lval\n0  foo     1\n1  bar     2\n\nIn [85]: right\nOut[85]: \n   key  rval\n0  foo     4\n1  bar     5\n\nIn [86]: pd.merge(left, right, on='key')\nOut[86]: \n   key  lval  rval\n0  foo     1     4\n1  bar     2     5\n```\n\n+ ## Append：\n\n```python\nIn [87]: df = pd.DataFrame(np.random.randn(8, 4), columns=['A','B','C','D'])\n\nIn [88]: df\nOut[88]: \n          A         B         C         D\n0  1.346061  1.511763  1.627081 -0.990582\n1 -0.441652  1.211526  0.268520  0.024580\n2 -1.577585  0.396823 -0.105381 -0.532532\n3  1.453749  1.208843 -0.080952 -0.264610\n4 -0.727965 -0.589346  0.339969 -0.693205\n5 -0.339355  0.593616  0.884345  1.591431\n6  0.141809  0.220390  0.435589  0.192451\n7 -0.096701  0.803351  1.715071 -0.708758\n\nIn [89]: s = df.iloc[3]\n\nIn [90]: df.append(s, ignore_index=True)\nOut[90]: \n          A         B         C         D\n0  1.346061  1.511763  1.627081 -0.990582\n1 -0.441652  1.211526  0.268520  0.024580\n2 -1.577585  0.396823 -0.105381 -0.532532\n3  1.453749  1.208843 -0.080952 -0.264610\n4 -0.727965 -0.589346  0.339969 -0.693205\n5 -0.339355  0.593616  0.884345  1.591431\n6  0.141809  0.220390  0.435589  0.192451\n7 -0.096701  0.803351  1.715071 -0.708758\n8  1.453749  1.208843 -0.080952 -0.264610\n```\n\n# 九、分组\n\n```python\nIn [91]: df = pd.DataFrame({'A' : ['foo', 'bar', 'foo', 'bar',\n   ....:                           'foo', 'bar', 'foo', 'foo'],\n   ....:                    'B' : ['one', 'one', 'two', 'three',\n   ....:                           'two', 'two', 'one', 'three'],\n   ....:                    'C' : np.random.randn(8),\n   ....:                    'D' : np.random.randn(8)})\n   ....: \n\nIn [92]: df\nOut[92]: \n     A      B         C         D\n0  foo    one -1.202872 -0.055224\n1  bar    one -1.814470  2.395985\n2  foo    two  1.018601  1.552825\n3  bar  three -0.595447  0.166599\n4  foo    two  1.395433  0.047609\n5  bar    two -0.392670 -0.136473\n6  foo    one  0.007207 -0.561757\n7  foo  three  1.928123 -1.623033\n\nIn [93]: df.groupby('A').sum()  #对键index A分组进行并对每个组执行sum函数\nOut[93]: \n            C        D\nA                     \nbar -2.802588  2.42611\nfoo  3.146492 -0.63958\n```\n\n```python\nIn [94]: df.groupby(['A','B']).sum()   #对index A B进行分组并对每个组执行sum函数\nOut[94]: \n                  C         D\nA   B                        \nbar one   -1.814470  2.395985\n    three -0.595447  0.166599\n    two   -0.392670 -0.136473\nfoo one   -1.195665 -0.616981\n    three  1.928123 -1.623033\n    two    2.414034  1.600434\n```\n\n# 十、重切片\n\n+ ## stack：压缩DataFrame列\n\n```python\nIn [99]: df2\nOut[99]: \n                     A         B\nfirst second                    \nbar   one     0.029399 -0.542108\n      two     0.282696 -0.087302\nbaz   one    -1.575170  1.771208\n      two     0.816482  1.100230\nIn [100]: stacked = df2.stack()\n\nIn [101]: stacked  = df2.stack()\nOut[101]: stacked\nfirst  second   \nbar    one     A    0.029399\n               B   -0.542108\n       two     A    0.282696\n               B   -0.087302\nbaz    one     A   -1.575170\n               B    1.771208\n       two     A    0.816482\n               B    1.100230\ndtype: float64\n```\n\n+ ## unstack反解压到上一层，不同参数解压层不同\n\n```python\nIn [102]: stacked.unstack()\nOut[102]: \n                     A         B\nfirst second                    \nbar   one     0.029399 -0.542108\n      two     0.282696 -0.087302\nbaz   one    -1.575170  1.771208\n      two     0.816482  1.100230\n\nIn [103]: stacked.unstack(1)\nOut[103]: \nsecond        one       two\nfirst                      \nbar   A  0.029399  0.282696\n      B -0.542108 -0.087302\nbaz   A -1.575170  0.816482\n      B  1.771208  1.100230\n\nIn [104]: stacked.unstack(0)\nOut[104]: \nfirst          bar       baz\nsecond                      \none    A  0.029399 -1.575170\n       B -0.542108  1.771208\ntwo    A  0.282696  0.816482\n```\n\n+ ## 透视Pivot表：\n\n```python\nIn [106]: df\nOut[106]: \n        A  B    C         D         E\n0     one  A  foo  1.418757 -0.179666\n1     one  B  foo -1.879024  1.291836\n2     two  C  foo  0.536826 -0.009614\n3   three  A  bar  1.006160  0.392149\n4     one  B  bar -0.029716  0.264599\n5     one  C  bar -1.146178 -0.057409\n6     two  A  foo  0.100900 -1.425638\n7   three  B  foo -1.035018  1.024098\n8     one  C  foo  0.314665 -0.106062\n9     one  A  bar -0.773723  1.824375\n10    two  B  bar -1.170653  0.595974\n11  three  C  bar  0.648740  1.167115\nIn [107]: pd.pivot_table(df, values='D', index=['A', 'B'], columns=['C'])\nOut[107]: \nC             bar       foo\nA     B                    \none   A -0.773723  1.418757\n      B -0.029716 -1.879024\n      C -1.146178  0.314665\nthree A  1.006160       NaN\n      B       NaN -1.035018\n      C  0.648740       NaN\ntwo   A       NaN  0.100900\n      B -1.170653       NaN\n      C       NaN  0.536826\n```\n\n# 十一、时间序列\n\n+ ## 生成：\n\n```python\nIn [108]: rng = pd.date_range('1/1/2012', periods=100, freq='S')\n\nIn [109]: ts = pd.Series(np.random.randint(0, 500, len(rng)), index=rng)\n\nIn [110]: ts.resample('5Min').sum()\nOut[110]: \n2012-01-01    25083\nFreq: 5T, dtype: int64\n```\n\n```python\nIn [111]: rng = pd.date_range('3/6/2012 00:00', periods=5, freq='D')\n\nIn [112]: ts = pd.Series(np.random.randn(len(rng)), rng)\n\nIn [113]: ts\nOut[113]: \n2012-03-06    0.464000\n2012-03-07    0.227371\n2012-03-08   -0.496922\n2012-03-09    0.306389\n2012-03-10   -2.290613\nFreq: D, dtype: float64\n\nIn [114]: ts_utc = ts.tz_localize('UTC')\n\nIn [115]: ts_utc\nOut[115]: \n2012-03-06 00:00:00+00:00    0.464000\n2012-03-07 00:00:00+00:00    0.227371\n2012-03-08 00:00:00+00:00   -0.496922\n2012-03-09 00:00:00+00:00    0.306389\n2012-03-10 00:00:00+00:00   -2.290613\nFreq: D, dtype: float64\n```\n\n+ ## 转换时间区：\n\n```python\nIn [116]: ts_utc.tz_convert('US/Eastern')\nOut[116]: \n2012-03-05 19:00:00-05:00    0.464000\n2012-03-06 19:00:00-05:00    0.227371\n2012-03-07 19:00:00-05:00   -0.496922\n2012-03-08 19:00:00-05:00    0.306389\n2012-03-09 19:00:00-05:00   -2.290613\nFreq: D, dtype: float64\n```\n\n+ ## 显示格式转换：\n\n```python\nIn [117]: rng = pd.date_range('1/1/2012', periods=5, freq='M')\n\nIn [118]: ts = pd.Series(np.random.randn(len(rng)), index=rng)\n\nIn [119]: ts\nOut[119]: \n2012-01-31   -1.134623\n2012-02-29   -1.561819\n2012-03-31   -0.260838\n2012-04-30    0.281957\n2012-05-31    1.523962\nFreq: M, dtype: float64\n\nIn [120]: ps = ts.to_period()\n\nIn [121]: ps\nOut[121]: \n2012-01   -1.134623\n2012-02   -1.561819\n2012-03   -0.260838\n2012-04    0.281957\n2012-05    1.523962\nFreq: M, dtype: float64\n\nIn [122]: ps.to_timestamp()\nOut[122]: \n2012-01-01   -1.134623\n2012-02-01   -1.561819\n2012-03-01   -0.260838\n2012-04-01    0.281957\n2012-05-01    1.523962\nFreq: MS, dtype: float64\n```\n\n```python\nIn [123]: prng = pd.period_range('1990Q1', '2000Q4', freq='Q-NOV')\n\nIn [124]: ts = pd.Series(np.random.randn(len(prng)), prng)\n\nIn [125]: ts.index = (prng.asfreq('M', 'e') + 1).asfreq('H', 's') + 9\n\nIn [126]: ts.head()\nOut[126]: \n1990-03-01 09:00   -0.902937\n1990-06-01 09:00    0.068159\n1990-09-01 09:00   -0.057873\n1990-12-01 09:00   -0.368204\n1991-03-01 09:00   -1.144073\nFreq: H, dtype: float64\n```\n\n# 十二、categoricals\n\nversion 0.15后DataFrame能够包含categorical\n\n```python\nIn [127]: df = pd.DataFrame({\"id\":[1,2,3,4,5,6], \"raw\\_grade\":['a', 'b', 'b', 'a', 'a', 'e']})\nIn [128]: df[\"grade\"] = df[\"raw\\_grade\"].astype(\"category\")\n\nIn [129]: df[\"grade\"]\nOut[129]: \n0    a\n1    b\n2    b\n3    a\n4    a\n5    e\nName: grade, dtype: category\nCategories (3, object): [a, b, e]\n```\n\n+ ## 重命名categorical：\n\n```python\ndf[\"grade\"].cat.categories = [\"very good\", \"good\", \"very bad\"]\n```\n\n+ ## 重排categorical并加入缺失categorical：\n\n```python\nIn [131]: df[\"grade\"] = df[\"grade\"].cat.set_categories([\"very bad\", \"bad\", \"medium\", \"good\", \"very good\"])\n\nIn [132]: df[\"grade\"]\nOut[132]: \n0    very good\n1         good\n2         good\n3    very good\n4    very good\n5     very bad\nName: grade, dtype: category\nCategories (5, object): [very bad, bad, medium, good, very good]\n```\n\n+ ## 根据categorical排序：\n\n```python\nIn [133]: df.sort_values(by=\"grade\")\nOut[133]: \n   id raw_grade      grade\n5   6         e   very bad\n1   2         b       good\n2   3         b       good\n0   1         a  very good\n3   4         a  very good\n```\n\n+ ## 分组categorical：\n\n```python\nIn [134]: df.groupby(\"grade\").size()\nOut[134]: \ngrade\nvery bad     1\nbad          0\nmedium       0\ngood         2\nvery good    3\ndtype: int64\n```\n\n# 十三、画图\n\n[官方文档](http:#pandas.pydata.org/pandas-docs/stable/visualization.html#visualization) \n一般不使用pandas的画图功能，而使用其他如matplotlib等。\n\n# 十四、读取存储\n\n+ ## CSV：\n\n```python\n写入：\n df.to_csv('foo.csv')\n读取：\n In [142]: pd.read_csv('foo.csv')\nOut[142]: \n     Unnamed: 0          A          B         C          D\n0    2000-01-01   0.266457  -0.399641 -0.219582   1.186860\n1    2000-01-02  -1.170732  -0.345873  1.653061  -0.282953\n2    2000-01-03  -1.734933   0.530468  2.060811  -0.515536\n3    2000-01-04  -1.555121   1.452620  0.239859  -1.156896\n4    2000-01-05   0.578117   0.511371  0.103552  -2.428202\n5    2000-01-06   0.478344   0.449933 -0.741620  -1.962409\n6    2000-01-07   1.235339  -0.091757 -1.543861  -1.084753\n..          ...        ...        ...       ...        ...\n993  2002-09-20 -10.628548  -9.153563 -7.883146  28.313940\n994  2002-09-21 -10.390377  -8.727491 -6.399645  30.914107\n995  2002-09-22  -8.985362  -8.485624 -4.669462  31.367740\n996  2002-09-23  -9.558560  -8.781216 -4.499815  30.518439\n997  2002-09-24  -9.902058  -9.340490 -4.386639  30.105593\n998  2002-09-25 -10.216020  -9.480682 -3.933802  29.758560\n999  2002-09-26 -11.856774 -10.671012 -3.216025  29.369368\n\n[1000 rows x 5 columns]\n```\n\n+ ## HDF5：\n\n```python\ndf.to_hdf('foo.h5','df')\nIn [144]: pd.read_hdf('foo.h5','df')\nOut[144]: \n                    A          B         C          D\n2000-01-01   0.266457  -0.399641 -0.219582   1.186860\n2000-01-02  -1.170732  -0.345873  1.653061  -0.282953\n2000-01-03  -1.734933   0.530468  2.060811  -0.515536\n2000-01-04  -1.555121   1.452620  0.239859  -1.156896\n2000-01-05   0.578117   0.511371  0.103552  -2.428202\n2000-01-06   0.478344   0.449933 -0.741620  -1.962409\n2000-01-07   1.235339  -0.091757 -1.543861  -1.084753\n...               ...        ...       ...        ...\n2002-09-20 -10.628548  -9.153563 -7.883146  28.313940\n2002-09-21 -10.390377  -8.727491 -6.399645  30.914107\n2002-09-22  -8.985362  -8.485624 -4.669462  31.367740\n2002-09-23  -9.558560  -8.781216 -4.499815  30.518439\n2002-09-24  -9.902058  -9.340490 -4.386639  30.105593\n2002-09-25 -10.216020  -9.480682 -3.933802  29.758560\n2002-09-26 -11.856774 -10.671012 -3.216025  29.369368\n\n[1000 rows x 4 columns]\n```\n\n+ ## EXCEL：\n\n```python\ndf.to_excel('foo.xlsx', sheet_name='Sheet1')\nIn [146]: pd.read_excel('foo.xlsx', 'Sheet1', index_col=None, na_values=['NA'])\nOut[146]: \n                    A          B         C          D\n2000-01-01   0.266457  -0.399641 -0.219582   1.186860\n2000-01-02  -1.170732  -0.345873  1.653061  -0.282953\n2000-01-03  -1.734933   0.530468  2.060811  -0.515536\n2000-01-04  -1.555121   1.452620  0.239859  -1.156896\n2000-01-05   0.578117   0.511371  0.103552  -2.428202\n2000-01-06   0.478344   0.449933 -0.741620  -1.962409\n2000-01-07   1.235339  -0.091757 -1.543861  -1.084753\n...               ...        ...       ...        ...\n2002-09-20 -10.628548  -9.153563 -7.883146  28.313940\n2002-09-21 -10.390377  -8.727491 -6.399645  30.914107\n2002-09-22  -8.985362  -8.485624 -4.669462  31.367740\n2002-09-23  -9.558560  -8.781216 -4.499815  30.518439\n2002-09-24  -9.902058  -9.340490 -4.386639  30.105593\n2002-09-25 -10.216020  -9.480682 -3.933802  29.758560\n2002-09-26 -11.856774 -10.671012 -3.216025  29.369368\n\n[1000 rows x 4 columns]\n```"
    }
  ]
}